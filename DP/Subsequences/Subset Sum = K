--------------------------------MEMOIZATION----------------------------------

class Solution{   
public:
     
     bool subset(int i,int sum,vector<int>&arr,vector<vector<int>>&dp){
         if(sum==0) return true;
         if(i==0) return (arr[0]==sum);
         
         if(dp[i][sum]!=-1) return dp[i][sum];
         
         bool nottake = subset(i-1,sum,arr,dp);
         
         
         bool take = false;
         if(arr[i]<=sum){
             take = subset(i-1,sum-arr[i],arr,dp);
         }
         
         return dp[i][sum] =  take || nottake;
     }
     
    
    bool isSubsetSum(vector<int>arr, int sum){
        int n= arr.size();
        vector<vector<int>>dp(n+1,vector<int>(sum+1,-1));
        return subset(n-1,sum,arr,dp);
        
        // code here 
    }
};

-----------------------------------TABULATION---------------------------------

class Solution{   
public:
    
    bool isSubsetSum(vector<int>arr, int k){
        // code here 
        int n= arr.size();
        vector<vector<bool>>dp(n+1,vector<bool>(k+1,0));
        
        for(int i=0;i<n;i++){
            dp[i][0]=true;
        }
        dp[0][arr[0]]=true;
        
        for(int i=1;i<n;i++){
            for(int j=1;j<=k;j++){
                bool nottake = dp[i-1][j];
                bool take = false;
                if(arr[i]<=j){
                    take = dp[i-1][j-arr[i]];
                    
                }
                dp[i][j]= take||nottake;
            }
        }
        return dp[n-1][k];
    }
};
