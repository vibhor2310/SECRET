In this type of pattern, move from starting to end in memoization ;

--------------------MEMOIZATION---------------------

class Solution {
public:

    int f(int i,int j, vector<vector<int>>&dp,vector<vector<int>>&triangle){
        int n= triangle.size();
        if(i==n-1){
            return triangle[n-1][j];
        }

        if(dp[i][j]!=-1) return dp[i][j];

        int d=triangle[i][j]+f(i+1,j,dp,triangle);
        int dg=triangle[i][j]+f(i+1,j+1,dp,triangle);

        return dp[i][j]= min(d,dg);
    }
    
    int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return f(0,0,dp,triangle);
        
    }
};


In Tabular DP , We move from last Index to first i.e. from variable end to fixed end;

------------------TABULATION ---------------------

class Solution {
public:

  
    
    int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        // return f(0,0,dp,triangle);

        for(int j=0;j<n;j++){
            dp[n-1][j]=triangle[n-1][j];
        }
        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int d = triangle[i][j]+dp[i+1][j];
                int dg = triangle[i][j]+dp[i+1][j+1];

                dp[i][j]= min(d,dg);
            }
        }
        return dp[0][0];

        
    }
};
